defns
  Typ :: 'Typ' ::=

  defn Γ ⊢ se ⇐ A ⤳ e :: :: Check :: 'C' by

    Γ ⊢ se ⇒ A ⤳ e    Γ ⊢ A ≡ B
    ---------------------------- :: Switch
    Γ ⊢ se ⇐ B ⤳ e

  % Declarative inference
  defn Γ ⊢ se ⇒ A ⤳ e  :: :: Inf :: 'I' by

    x : A ∊ Γ
    -------------- :: Var
    Γ ⊢ x ⇒ A ⤳ x

    -------------------- :: Unit
    Γ ⊢ <> ⇒ Unit ⤳ <>

    Γ, x:A ⊢ se ⇒ B ⤳ e'
    --------------------------------- :: Lam
    Γ ⊢ λx:A.se ⇒ Πx:A.B ⤳ λx:A.e'

    Γ, x:A ⊢ se ⇒ B ⤳ e'
    ------------------------------------ :: PLam
    Γ ⊢ λ̂x:A.se ⇒ ∀x:A.B ⤳ λ̂x:A.e'

    Γ ⊢ se ⇒ A ⤳ e    Γ ⊢ ss : A >> B ⤳ s
    --------------------------------------- :: App
    Γ ⊢ se(ss) ⇒ B ⤳ e(s)

    Γ ⊢ se ⇒ A ⤳ e 
    --------------------------------- :: Refl
    Γ ⊢ refl se ⇒ e = e : A ⤳ refl e

    Γ ⊢ A  Γ, x:A ⊢ B
    Γ ⊢ se1 ⇐ A ⤳ e1    Γ ⊢ se2 ⇐ A ⤳ e2
    Γ ⊢ sp ⇐ e1 = e2 : A ⤳ p
    Γ ⊢ se ⇐ [e1/x]B ⤳ e
    -------------------------------------------------- :: Subst
    Γ ⊢ subst(sp : se1 = se2 : A, x.B , se) ⇒ [e2/x]B ⤳ subst(p : e1 = e2 : A, x.B , e)


  defn Γ ⊢ ss : A >> B ⤳ s :: :: SpineApp :: 'SA' by

    -------------------- :: Empty
    Γ ⊢ · : A >> A ⤳ ·

    Γ ⊢ Πx:B.A
    Γ ⊢ se ⇐ B ⤳ e   Γ ⊢ ss : [e/x]A >> C ⤳ s
    ------------------------------------------ :: Arg
    Γ ⊢ se, ss : Πx:B.A >> C ⤳ e, s

    Γ ⊢ ∀x:B.A 
    Γ ⊢ se ⇐ B ⤳ e    Γ ⊢ ss : [e/x]A >> C ⤳ s
    ------------------------------------------- :: ImpArg
    Γ ⊢ {se}, ss : ∀x:B.A >> C ⤳ {e}, s

% non-deterministic
    Γ ⊢ ∀x:B.A 
    Γ ⊢ e ⇐ B    Γ ⊢ ss : [e/x]A >> C ⤳ s
    ----------------------------------------- :: HoleArg
    Γ ⊢ {_}, ss : ∀x:B.A >> C ⤳ {e}, s

  
