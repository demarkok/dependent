defns
  Core :: 'Core' ::=

  defn Γ ⊢ e ⇐ A :: :: Check :: 'C' by

    Γ ⊢ e ⇒ A'  Γ ⊢ A' ≡ A
    ----------------------- :: Switch
    Γ ⊢ e ⇐ A

  defn Γ ⊢ e ⇒ A :: :: Inf :: 'I' by

    x : A ∊ Γ
    --------- :: Var
    Γ ⊢ x ⇒ A

    -------------- :: Unit
    Γ ⊢ <> ⇒ Unit

    Γ, x:A ⊢ e ⇒ B
    ------------------------ :: Lam
    Γ ⊢ λx:A.e ⇒ Πx:A.B

    Γ, x:A ⊢ e ⇒ B
    ------------------------ :: PLam
    Γ ⊢ λ̂x:A.e ⇒ ∀x:A'.B

    Γ ⊢ e ⇒ A    Γ ⊢ s : A >> B 
    ---------------------------- :: App
    Γ ⊢ e(s) ⇒ B

    Γ ⊢ e ⇒ A 
    ---------------------- :: Refl
    Γ ⊢ refl e ⇒ e = e : A

    Γ ⊢ A  Γ, x:A ⊢ B
    Γ ⊢ e1 ⇐ A    Γ ⊢ e2 ⇐ A    
    Γ ⊢ p ⇐ e1 = e2 : A
    Γ ⊢ e ⇐ [e1/x]B
    ---------------------------------------------- :: Subst
    Γ ⊢ subst(p : e1 = e2 : A, x.B , e) ⇒ [e2/x]B

  defn Γ ⊢ s : A >> B :: :: SpineApp  :: 'SA' by

    -------------------- :: Empty
    Γ ⊢ · : A >> A

    Γ ⊢ Πx:B.A
    Γ ⊢ e ⇐ B   Γ ⊢ s : [e/x]A >> C
    ------------------------------------------ :: Arg
    Γ ⊢ e, s : Πx:B.A >> C

    Γ ⊢ ∀x:B.A 
    Γ ⊢ e ⇐ B   Γ ⊢ s : [e/x]A >> C
    ------------------------------------------- :: ImpArg
    Γ ⊢ {e}, s : ∀x:B.A >> C




  defn Γ ⊢ A ≡ B :: :: TypeConv :: 'TC'
  {{ com Type Conversion }} by

    Γ ⊢ A ≡ A'    Γ, x:A ⊢ B ≡ B'
    ------------------------------ :: Pi
    Γ ⊢ Πx:A.B ≡ Πx:A'.B'

    Γ ⊢ A ≡ A'    Γ, x:A ⊢ B ≡ B'
    ------------------------------ :: Forall
    Γ ⊢ ∀x:A.B ≡ ∀x:A'.B'

    Γ ⊢ A ≡ B  Γ ⊢ e1 ≡ p1 ⇐ A  Γ ⊢ e2 ≡ p2 ⇐ A
    ------------------------------------------------- :: Eq
    Γ ⊢ e1 = e2 : A ≡ p1 = p2 : B

    % Non-structural rules

    --------- :: ReflC
    Γ ⊢ A ≡ A

    Γ ⊢ A ≡ B 
    --------- :: SymC
    Γ ⊢ B ≡ A

    Γ ⊢ A ≡ B  Γ ⊢ B ≡ C
    --------------------- :: TransC
    Γ ⊢ A ≡ C

  defn Γ ⊢ e1 ≡ e2 ⇒ A :: :: InfConv :: 'IC' by

    x : A ∊ Γ
    ---------------- :: Var
    Γ ⊢ x ≡ x ⇒ A

    Γ ⊢ e1 ≡ e2 ⇒ A
    Γ ⊢ s1 ≡ s2 : A >> B    
    ---------------------------------------- :: App
    Γ ⊢ e1(s1) ≡ e2(s2) ⇒ B

  defn Γ ⊢ e1 ≡ e2 ⇐ A :: :: CheckConv :: 'CC'
  {{ com Checking Conversion }} by

    Γ ⊢ e1 ≡ e2 ⇒ A   Γ ⊢ A ≡ B
    ---------------------------- :: Switch
    Γ ⊢ e1 ≡ e2 ⇐ B

    % assuming it's only called when e : A
    Γ ⊢ A1 ≡ A    Γ ⊢ A2 ≡ A    Γ, x:A ⊢ e1 ≡ e2 ⇐ B
    ------------------------------------------------- :: Lam
    Γ ⊢ λx:A1.e1 ≡ λx:A2.e2 ⇐ Πx:A.B

    Γ ⊢ A1 ≡ A    Γ ⊢ A2 ≡ A    Γ, x:A ⊢ e1 ≡ e2 ⇐ B
    ------------------------------------------------- :: PLam 
    Γ ⊢ λ̂x:A1.e1 ≡ λ̂x:A2.e2 ⇐ ∀x:A.B

    Γ ⊢ p ≡ p' ⇐ A   Γ ⊢ e1 ≡ p ⇐ A   Γ ⊢ e2 ≡ p ⇐ A
    ------------------------------------------------ :: Refl
    Γ ⊢ refl e1 ≡ refl e2 ⇐ (p = p' : A)


    % Non-structural rules

    -------------- :: ReflC
    Γ ⊢ e ≡ e ⇐ A

    Γ ⊢ e1 ≡ e2 ⇐ A
    ---------------- :: SymC
    Γ ⊢ e2 ≡ e1 ⇐ A

    Γ ⊢ e1 ≡ e2 ⇐ A  Γ ⊢ e2 ≡ e3 ⇐ A
    --------------------------------- :: TransC
    Γ ⊢ e1 ≡ e3 ⇐ A


    % Reduction

    Γ ⊢ e2 ⇐ A    Γ, x:A ⊢ e1(s) ⇐ B
    --------------------------------------- :: BetaR
    Γ ⊢ (λx:A.e1)(e2, s) ≡ [e2/x]e1(s) ⇐ B

    Γ ⊢ e2 ⇐ A    Γ, x:A ⊢ e1(s) ⇐ B
    --------------------------------------- :: BetaRImp
    Γ ⊢ (λ̂x:A.e1)({e2}, s) ≡ [e2/x]e1(s) ⇐ B

    Γ ⊢ e ⇐ Πx:A.B
    --------------------------- :: EtaR
    Γ ⊢ λx:A.e(x) ≡ e ⇐ Πx:A.B

    Γ ⊢ e ⇐ ∀x:A.B
    --------------------------- :: EtaRImp
    Γ ⊢ λx:A.e({x}) ≡ e ⇐ ∀x:A.B

  defn Γ ⊢ s1 ≡ s2 : A >> B :: :: SpineConv :: 'SC' {{ com Spine Conversion }} by

    ------------------- :: Empty
    Γ ⊢ · ≡ · : A >> A

    Γ ⊢ e1 ≡ e2 ⇐ A   Γ ⊢ s1 ≡ s2 : [e1/x]B >> C
    --------------------------------------------- :: Arg
    Γ ⊢ e1, s1 ≡ e2, s2 : Πx:A.B >> C

    Γ ⊢ e1 ≡ e2 ⇐ A   Γ ⊢ s1 ≡ s2 : [e1/x]B >> C
    --------------------------------------------- :: ImpImpArg
    Γ ⊢ {e1}, s1 ≡ {e2}, s2 : ∀x:A.B >> C


  defn Γ ⊢ A :: :: Wf :: 'WF' by


    -------- :: Unit
    Γ ⊢ Unit

    Γ ⊢ A    Γ, x:A ⊢ B
    --------------------- :: Pi
    Γ ⊢ Πx:A.B

    Γ ⊢ A    Γ, x:A ⊢ B
    -------------------- :: Forall
    Γ ⊢ ∀x:A.B

    Γ ⊢ A    Γ ⊢ e1 ⇐ A    Γ ⊢ e2 ⇐ A
    ---------------------------------- :: Eq 
    Γ ⊢ e1 = e2 : A  

