defns
  Ok :: 'Ok' ::=

  defn Vars ⊢ e OK :: :: OK :: 'OK' by

% Variables

    varx ∊ Vars
    --------------- :: Var
    Vars ⊢ varx OK


    ---------------- :: MVar
    Vars ⊢ ax[σ]  OK 

% Constructors

    --------------- :: Unit
    Vars ⊢ <> OK 

    Vars ⊢ A OK     Vars, x ⊢ e OK 
    ------------------------------------- :: Lam
    Vars ⊢ λx:A.e OK

    Vars ⊢ A OK    Vars, sx ⊢ e OK    sx ∊ fv e
    -------------------------------------------- :: PLam
    Vars ⊢ λ̂sx:A.e OK

    Vars ⊢ e OK 
    ---------------- :: Refl
    Vars ⊢ refl e OK

% Eliminators

    e1, e2 are ground   Vars ⊢ e1, e2 OK
    ------------------------------------ :: AppGround
    Vars ⊢ e1 e2 OK

    Vars ⊢ e1, e2 OK     (e1 e2) INERT 
    ----------------------------------- :: AppInert
    Vars ⊢ e1 e2 OK

    Vars ⊢ λ̂sx:A.[sx/x]e1 OK   A is ground Vars ⊢ e2 OK
    --------------------------------------------------- :: AppOK
    Vars ⊢ (λx:A.e1) e2 OK

    Vars ⊢ λx:A.e1 OK   A is ground    Vars ⊢ e2 OK   e2 NeuINERT
    --------------------------------------------------------------- :: AppNeut
    Vars ⊢ (λx:A.e1) e2 OK

    Vars ⊢ λ̂sx:A.e1 OK    A is ground   Vars ⊢ e2 OK
    ----------------------------------------------- :: AppSafe
    Vars ⊢ (λ̂sx:A.e1) {e2} OK

    Vars ⊢ e1, e2, p, e, A OK   Vars, x ⊢ B OK   e1, e2, p, A, B are ground
    --------------------------------------------------------- :: SubstGround
    Vars ⊢ subst(p:e1=e2:A, x.B, e) OK

    Vars ⊢ e1, e2, p, e, A OK   Vars, x ⊢ B OK   subst(p:e1=e2:A, x.B, e) INERT
    -------------------------------------------------- :: SubstInert
    Vars ⊢ subst(p:e1=e2:A, x.B, e) OK

    % Vars ⊢ e1 OK   Vars ⊢ A OK  
    % Vars, varx ⊢ e2 OK
    % ---------------------------------------------- :: LetNoS
    % Vars ⊢ let varx : A = e1 in e2 OK

  defn Vars ⊢ A OK :: :: TOK :: 'TOK' by

    --------------------- :: Unit
    Vars ⊢ Unit OK


    Vars ⊢ A OK    Vars, x ⊢ B OK
    ------------------------------------------- :: Pi
    Vars ⊢ Πx:A.B OK


    Vars ⊢ A OK    Vars, sx ⊢ B OK
    ------------------------------ :: Forall
    Vars ⊢ ∀sx:A.B OK


    Vars ⊢ A OK    Vars ⊢ e1 OK    Vars ⊢ e2 OK
    ----------------------------------------------------------------- :: Eq
    Vars ⊢ e1 = e2 : A OK

    Vars ⊢ A OK    Vars ⊢ e OK 
    Vars, x ⊢ B OK
    ------------------------------------------ :: Let
    Vars ⊢ let x:A = e in B OK


  defn e NeuINERT :: :: NeuInert :: 'NeuInert' by
  
% Variables
    ------- :: Var
    x NeuINERT

% Eliminators

    e1 NeuINERT
    --------------:: App
    e1 e2 NeuINERT 

    p NeuINERT
    --------------------------------- :: Subst
    subst(p:e1=e2:A, x.B, e) NeuINERT 

  defn e INERT :: :: Inert :: 'Inert' by

    e NeuINERT
    ----------- :: Neu
    e INERT

% Constructors

    -------- :: Unit
    <> INERT

    ------------ :: Lam
    λx:A.e INERT

    ------------- :: PLam
    λ̂sx:A.e INERT

    ------------ :: Refl 
    refl e INERT

  defn ce OK :: :: ceOk :: 'ceOk' by


  defn Vars ⊢ eAList OK :: :: eAGround :: 'eAGr' by

  % ----- :: Place
  % ● OK

  % cA OK
  % --------------- :: LamA
  % λx:cA.e OK


  % ce OK
  % ----------- :: LamE
  % λx:A.ce OK


  % ce1 e2 INERT
  % -----------
  % ce1  e2 OK









